---
title: 'セキュリティレビュー'
mode: 'ask'
description: 'セキュリティ対策に関するレビュー依頼のコマンドです。必ずファイル名と行番号を含めて出力してください。'
---

# セキュリティレビュー依頼

あなたはアプリケーションコードをセキュリティ観点でレビューしています。
以下の各セクションで検出した問題について、必ず該当するファイルパスと行番号を出力してください。
また、以下のフォーマットで報告してください。
**実際のコード修正は行わないでください**

【出力フォーマットの例】

file: src/controllers/userController.js
line: 42
issue: パスワードを平文でログ出力している
code: console.log("password:", req.body.password);
recommendation: “console.log” を削除し、機密情報はマスキングする。または構造化ログライブラリを使いフィルタリングを入れる。

## ログ出力&機密データ監査

不安全なログ記録、 個人識別情報（PII）の露出、不適切なログ保全に関する問題を見つけてください。

次のような問題を見つけてください：

- パスワード、トークン、APIキー、セッションIDなどの機密情報をログ出力している
- リクエスト／レスポンスのボディやヘッダー、ユーザー提供データなどをフィルタリングせずに丸ごとログに記録している
- マスキングやサニタイズなしにスタックトレースや例外をそのままログに吐き出している
- 本番用コードに残された console.log／printステートメント
- システム内部のパス、設定、DB クエリを含むログ
- アクセス制御のないパブリッククラウドバケットへのログ出力など、非安全なログ転送手段
- JSONやECSなどの構造化ログ形式を利用していない
- debug、info、warn、error といったログレベルがない、または誤用されている

機密データをマスキング／除外するリファクタリング案を示し、構造化ログライブラリやフィルターの導入を推奨するとともに、最小権限・データ最小化の原則に沿うよう開発者へ注意を促してください。

## アクセス制御＆認可レビュー

認可およびアクセス制御の弱点についてレビューしてください。

次のような問題を見つけてください：

- ロールベース（RBAC）や属性ベース（ABAC）のアクセス制御が欠落または弱い
- 保護されたルート／アクション／データへの直接アクセスに権限チェックがない
- クライアント側のフラグやロールを鵜呑みにしてビジネスロジックでバイパスしている
- ハードコードされたロール名や権限文字列を使い、中央集権的な管理をしていない
- 認証が必要なはずのAPIが認証なしで公開されている
- ユーザーが自分のレコードのみを操作できるといった文脈的チェックがない

該当箇所にセキュアなミドルウェアや集中管理ポリシーの導入を推奨し、コメント付きで安全なリファクタリング案を示してください。

## ハードコードされたシークレット

ハードコードされたシークレット（API キー、トークン、パスワード等）の観点でレビューしてください。

次のような問題を見つけてください：

- APIキー、アクセストークン、クライアントシークレット、パスワードがリテラル文字列として埋め込まれている
- process.envがフロントエンドコードで直接使われている
- .env、.properties、appsettings.jsonに機密情報が平文で書かれている
- OAuth トークン、JWT、HMAC シークレットがコメントやテスト設定、JSON定義、ログ内に含まれている

各指摘に対してコメントと修正提案を行い、Azure Key Vault、AWS Secrets Managerなど安全なシークレット管理サービスの利用を推奨し、リスクを説明してください。

## 未検証のGenAI生成コード受入れ

このコードがAI 生成コンテンツ（GitHub Copilot、ChatGPT等）を検証なしで受け入れていないかレビューしてください。

次のような兆候を見つけてください。

- 公式レジストリに存在しない不明な依存パッケージ（幻覚の可能性）
- 存在しない・廃止された・ドキュメント未記載の API 呼び出し
- プロジェクトのインフラと合わない設定コード（例：AWS プロジェクトでのAzure設定）
- doTask()、handleThing() のような曖昧・汎用すぎる変数・メソッド名
- AI 利用を示すコメントや TODO があるが、その後の検証がない
- 新規導入ロジックに対するテストカバレッジや検証コードがない
- スタイルや構造が急に変わっている箇所（未レビューの AI 挿入の可能性）
- 新たに追加されたコードに対するドキュメントや説明不足

第三者リソースの検証方法、ロジックの検証手順、人によるレビューの促進案をコメント付きで示してください。不確実性やリスクが高い部分は特に注記してください。

## 認証フロー

アプリケーションの認証ロジックとフローをセキュリティ観点でチェックしてください。

次のような問題を見つけてください：

- 保護されたルートやリソースで認証が不完全または適切に強制されていない
- 長寿命または有効期限なしのトークン（例：有効期限expがないJWT）
- CSRF保護の欠如（SameSite属性設定やフォーム内トークンがない）
- レートリミットなし、MFA未導入などの不安全なログインフロー
- トークンやセッションIDがログ、URL、フロントエンドJavaScriptに露出
- ユーザー入力パスワードをそのまま下流APIに渡している
- 以下の安全策があるかもチェックしてください：
  - 短命トークン＋リフレッシュワークフロー
  - サーバーサイドセッションストレージ（有効期限付き）
  - HttpOnly、Secure、SameSite=Strict を付与したクッキー
  - Well-testedなIDプロバイダー／認証フレームワークの使用

問題点があれば具体的な緩和策を提案してください。

## 非推奨・危険API使用

非推奨・危険なAPIの使用有無をチェックしてください。

次のような問題を見つけてください：

- MD5, SHA1, crypto.createCipher, System.Security.Cryptography.SHA1CryptoServiceProvider などの非推奨暗号化関数
- サニタイズやエンコード機能を持たないレガシーI/O API
- eval や外部入力に対する JSON.parse、ObjectInputStream、BinaryFormatter などの危険な逆シリアライズ
- ユーザー入力を直接使う fs.readFileSync、Runtime.exec、ProcessBuilder、child_process.execなどの危険なファイル／シェル操作
- バージョン固定されていない信頼できないサードパーティライブラリ
- TLS なしのhttp.get、fetch、WebClient（UseHttps無し）などの非安全なHTTP通信

各APIがなぜ危険なのか、どの代替手段が安全か、適切な緩和策があればいつ使用可能かを説明し、注釈やリファクタリング案を提示してください。

## 入力検証＆サニタイズ

未検証・不十分な入力検証の観点でレビューしてください。

次のような問題を見つけてください：

- Joi、Zod、Ajv、DataAnnotations、@Valid など構造化された検証ライブラリを使っていない
- リクエスト／クエリ／パス／ボディのパラメータを検証・サニタイズせずに直接扱っている
- HTML テンプレートへエスケープなしに入力を埋め込んでいる（XSS の可能性）
- JSON スキーマやシリアライズデータ構造の強制がない
- 入力長や文字種の境界を定めずに正規表現で検証（ReDoS のリスク）
- 型変換を暗黙的に行い、文字列を数値や真偽値として扱っている

発見した問題に対して、危険性を説明しどのように修正すべきか具体的な例を示してください。

## SQLインジェクション対策

SQLインジェクションのリスクがないかレビューしてください。

次のような問題を見つけてください：

- プレースホルダやパラメータバインディングを使わずに文字列連結でクエリを組み立てている
- ORマッパー（ORM）やクエリビルダを無効化して生SQLを直接実行している
- LIKE句やIN句にユーザー入力をそのまま埋め込んでいる
- ストアドプロシージャを使わずに全てアプリケーション側でSQLを構築している
- エスケープ・サニタイズの処理が不十分な独自実装をしている

改善案をコメント付きで示してください：

- パラメータ化クエリまたはプリペアドステートメントへの書き換え例
- ORM／クエリビルダでの安全なパラメータバインディングの使用例
- ストアドプロシージャやビューの活用による分離の提案
- 入力長・文字種制限を併用した多層防御（Defense-in-Depth）の推奨
- 脆弱性のあるライブラリ使用

## 依存ライブラリ／サードパーティモジュールの安全性

次のような問題を見つけてください：

- パッケージマネージャのlockファイルが更新されておらず、既知のCVEが残っている
- バージョン指定がワイルドカード（^, ~）だけで、特定の安全なパッチに固定されていない
- 非公式レジストリや署名されていないアーティファクトからライブラリを取得している
- メジャーバージョンアップで破壊的変更のリスクを考慮せずに放置している

改善案をコメント付きで示してください：

- 既知の脆弱性を含むライブラリの最新安全版へのアップグレード手順
- SCAツール導入例とCIへの組み込み方法
- package-lock.json / yarn.lock のリフレッシュと定期的なレビューフロー
- サンドボックスや最小権限ポリシーで外部モジュールの利用を制限する設定例

