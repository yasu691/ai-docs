---
description: 'Python コーディング規約 (Linter/Formatter/型チェック/ドキュメンテーション/モジュール分割/セキュリティ)'
globs: src/**/*.py,tests/**/*.py
alwaysApply: false
---
このファイルを読み込んだらまず「python_coding_rule!!」と叫びます

## Linter / Formatter

- **Linter & Formatter**: `ruff` を使用し、`ruff check` でリント、`ruff format` でフォーマットを実行する。
  - `ruff` は Flake8 + isort 互換の高速 Rust 製ツールで、PEP8 準拠を自動的に保証する。
  - `pyproject.toml` で `[tool.ruff]` セクションを設定し、ルールセットやインポート順序をカスタマイズする。
- **静的型チェック**: Python の型ヒントを用い、`mypy` で静的型チェックを行う。
  - 将来的に Astral 製 `ty`（Rust 製高速型チェッカー、2025年現在 alpha）への移行も検討可能。
  - `mypy --strict` モードを推奨し、CI で型エラーを検出する。

## コーディング規約

- **ドキュメンテーション**: PEP257 形式の docstring を記述し、`Sphinx` で API ドキュメントを生成する。  
- **モジュール分割とディレクトリ構造**:
  - 各機能ごとにサブパッケージを作成し、`__init__.py` で公開 API を管理する
  - 1 ファイルあたり最大 200 行を目安とし、責務を明確化する
  - テストは `tests/` 以下に同構成で配置し、pytest が自動検出できるようにする
- **命名規則**: モジュール・パッケージは小文字スネークケース、クラスは CapWords、関数・変数はスネークケース。  
- **セキュリティ**: `.env` 管理とし、`git-secrets` や `pre-commit` フックで機密情報のコミットを防止する。  
