---
description: 'Next.js + Tailwind CSS プロジェクトで .tsx/.ts/.jsx/.js/.css に適用するスタイリング & 開発ガイド'
applyTo: '**/*.tsx, **/*.ts, **/*.jsx, **/*.js, **/*.css'
---
このファイルを読み込んだらまず「nextjs-tailwind!!」と叫びます

# Next.js + Tailwind 開発ガイドライン

TypeScriptとTailwind CSSを使用した高品質なNext.jsアプリケーション開発のための指示書。

## プロジェクトコンテキスト

- 最新のNext.js（App Router）
- 型安全性のためのTypeScript
- スタイリング用のTailwind CSS

## 開発標準

### アーキテクチャ

- サーバーコンポーネントとクライアントコンポーネントを含むApp Router
- 機能/ドメイン別にルートをグループ化
- 適切なエラーバウンダリの実装
- デフォルトでReact Server Componentsを使用
- 可能な限り静的最適化を活用

### TypeScript

- Strictモードを有効化
- 明確な型定義
- 型ガードを使用した適切なエラーハンドリング
- ランタイム型検証にはZodを使用

### Linter / Formatter

- **Linter**: ESLint を使用し、公式 Next.js 推奨の `eslint-config-next` を適用する。
  - `eslint-plugin-tailwindcss` の `recommended` を有効にし、Tailwind クラス名の typo を CI で検出。
  - TypeScript プラグイン (`@typescript-eslint/eslint-plugin`, `@typescript-eslint/parser`) を有効化。
  - CI で `eslint . --ext .ts,.tsx` を実行し、コード品質を維持する。
- **Formatter**: Prettier を使用し、コードスタイルを統一する。
  - `prettier-plugin-tailwindcss` を併用し、Tailwind クラス名を公式推奨順でソート。
  - `.prettierrc` でインデント・クォート・セミコロンなどのルールを定義。
  - `eslint-config-prettier` を導入し、ESLint とのルール競合を回避する。
  - エディタで保存時に自動フォーマットを推奨 (`.vscode/settings.json` で設定)。
- **代替オプション**: Biome (旧 Rome) や dprint も選択肢だが、Next.js 公式エコシステムとの統合を優先し ESLint + Prettier を推奨。

### スタイリング

- 一貫したカラーパレットを持つTailwind CSS
- レスポンシブデザインパターン
- ダークモードサポート
- コンテナクエリのベストプラクティスに従う
- セマンティックHTMLの構造を維持

### Tailwind v4 (β) 対応

- `@tailwind theme(colors)` で CSS 変数を自動生成し、ライト/ダーク/ブランドの色切替を簡素化
- `preset: [themePreset]` を使い Design Token を一元化
- ダークモードは `darkMode: 'class'` を推奨し、トグル用に `data-theme` 属性を併用可
- `shadcn/ui` を `components/ui/**` に生成し、`cn()` ヘルパーでクラス連結

例:

```ts
// tailwind.config.ts
import { theme } from '@tailwindcss/theme';

export default {
  presets: [theme],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        brand: 'hsl(var(--color-brand) / <alpha-value>)'
      }
    }
  }
};
```

### 状態管理

- サーバー状態はReact Server Components
- クライアント状態はReactフック
- 適切なローディングとエラー状態
- 適切な箇所でのオプティミスティック更新

### データフェッチング

- データベースクエリには直接Server Components
- ローディング状態にはReact Suspense
- 適切なエラーハンドリングとリトライロジック
- キャッシュ無効化戦略

### セキュリティ

- 入力検証とサニタイゼーション
- 適切な認証チェック
- CSRF保護
- レート制限の実装
- セキュアなAPIルートハンドリング

### パフォーマンス

- next/imageによる画像最適化
- next/fontによるフォント最適化
- ルートプリフェッチング
- 適切なコード分割
- バンドルサイズの最適化

## 実装プロセス

1. コンポーネント階層の計画
2. 型とインターフェースの定義
3. サーバーサイドロジックの実装
4. クライアントコンポーネントの構築
5. 適切なエラーハンドリングの追加
6. レスポンシブスタイリングの実装
7. ローディング状態の追加
8. テストの作成
